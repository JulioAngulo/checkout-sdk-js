{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs/Observable\"","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-types.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/external \"rxjs/observable/concat\"","webpack://checkoutKit/external \"rxjs/observable/of\"","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-types.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/strategies/payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/geography/country-action-types.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-types.ts","webpack://checkoutKit/external \"rxjs/observable/defer\"","webpack://checkoutKit/./src/embedded-checkout/parse-origin.ts","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/external \"rxjs/observable/from\"","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/./src/common/selector/cache-key-resolver.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/external \"rxjs/observable/empty\"","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/external \"rxjs/observable/throw\"","webpack://checkoutKit/external \"rxjs/observable/merge\"","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/cart/amount-transformer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/strategies/shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","standard_error_StandardError","_super","StandardError","message","_this","this","type","setPrototypeOf","__proto__","_newTarget","Error","captureStackTrace","stack","external_tslib_","ConsignmentActionType","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","CouponActionType","BillingAddressActionType","GiftCertificateActionType","PaymentMethodActionType","LOAD_INSTRUMENTS_REQUESTED","LOAD_INSTRUMENTS_SUCCEEDED","LOAD_INSTRUMENTS_FAILED","DELETE_INSTRUMENT_REQUESTED","DELETE_INSTRUMENT_SUCCEEDED","DELETE_INSTRUMENT_FAILED","CheckoutButtonActionType","INITIALIZE_REMOTE_BILLING_REQUESTED","INITIALIZE_REMOTE_BILLING_SUCCEEDED","INITIALIZE_REMOTE_BILLING_FAILED","INITIALIZE_REMOTE_SHIPPING_REQUESTED","INITIALIZE_REMOTE_SHIPPING_SUCCEEDED","INITIALIZE_REMOTE_SHIPPING_FAILED","INITIALIZE_REMOTE_PAYMENT_REQUESTED","INITIALIZE_REMOTE_PAYMENT_SUCCEEDED","INITIALIZE_REMOTE_PAYMENT_FAILED","LOAD_REMOTE_SETTINGS_REQUESTED","LOAD_REMOTE_SETTINGS_SUCCEEDED","LOAD_REMOTE_SETTINGS_FAILED","SIGN_OUT_REMOTE_CUSTOMER_REQUESTED","SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED","SIGN_OUT_REMOTE_CUSTOMER_FAILED","UPDATE_REMOTE_CHECKOUT","EmbeddedCheckoutEventType","ContentType","__webpack_exports__","CountryActionCreator","_countryRequestSender","loadCountries","options","Observable_","observer","next","data_store_","country_action_types","then","response","body","data","complete","catch","error","CountryRequestSender","_requestSender","_config","_a","timeout","headers","Accept-Language","locale","OrderFinalizationNotRequiredError","standard_error","PaymentStrategyActionCreator","_strategyRegistry","_orderActionCreator","execute","payload","store","strategy","state","getState","payment","useStoreCredit","meta","methodId","isPaymentDataRequired","method","paymentMethods","getPaymentMethod","gatewayId","missing_data_error","MissingPaymentMethod","getByMethod","payment_strategy_actions","ExecuteRequested","undefined","ExecuteSucceeded","ExecuteFailed","finalize","concat_","of_","FinalizeRequested","_loadOrderPaymentsIfNeeded","defer_","getPaymentId","order_finalization_not_required_error","providerId","id","gateway","FinalizeSucceeded","pipe","operators_","throw_error_action","FinalizeFailed","initialize","InitializeRequested","InitializeSucceeded","InitializeFailed","deinitialize","DeinitializeRequested","DeinitializeSucceeded","DeinitializeFailed","widgetInteraction","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","checkout","getCheckout","orderId","loadOrderPayments","empty_","CartChangedError","CheckoutValidator","_checkoutRequestSender","validate","MissingCheckout","loadCheckout","comparator","cart_comparator","grandTotal","_compareCoupons","coupons","_compareGiftCertificates","giftCertificates","isEqual","cart","cart_changed_error","couponsA","couponsB","external_lodash_","giftCertificatesA","giftCertificatesB","isVaultedInstrument","instrument","Boolean","instrumentId","CardBrand","DigitalWalletType","PaymentActionCreator","_paymentRequestSender","submitPayment","payment_actions","SubmitPaymentRequested","from_","_getPaymentRequestBody","loadCurrentOrder","SubmitPaymentSucceeded","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","paymentData","invalid_argument_error","billingAddress","getBillingAddress","customer","getCustomer","order","getOrder","paymentMethod","_getPaymentMethod","shippingAddress","getShippingAddress","consignments","getConsignments","shippingOption","getShippingOption","storeConfig","config","getStoreConfig","contextConfig","getContextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","orderMeta","getOrderMeta","internalCustomer","map_to_internal_customer","authToken","getPaymentToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","request","geoCountryCode","source","storeProfile","paymentMethodSelector","initializationData","PaymentRequestSender","_client","Promise","resolve","reject","_transformResponse","status","statusText","PaymentStrategyRegistry","_store","token","_getToken","cacheToken","_hasFactory","payment_method_types","_isLegacyMethod","MissingCheckoutConfig","clientSidePaymentProviders","paymentSettings","registry_registry","PaymentArgumentInvalidError","invalidFields","join","PaymentStrategy","_isInitialized","AfterpayPaymentStrategy","_checkoutValidator","_paymentActionCreator","_paymentMethodActionCreator","_remoteCheckoutActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","load","_mapCountryToISO2","afterpaySdk","_afterpaySdk","paymentId","payment_argument_invalid_error","dispatch","initializePayment","loadPaymentMethod","_displayModal","loadSettings","afterpay","remoteCheckout","settings","not_initialized_error","PaymentNotInitialized","orderPayload","paymentPayload","nonce","submitOrder","countryName","clientToken","countryCode","display","payment_strategy","AmazonPayPaymentStrategy","_billingAddressActionCreator","_scriptLoader","_window","window","amazonOptions","amazon","_walletOptions","_paymentMethod","loadWidget","_createWallet","referenceId","_getOrderReferenceId","_b","request_error","_getMerchantId","merchantId","container","onError","onPaymentSelect","_c","onReady","document","getElementById","OffAmazonPayments","walletOptions","amazonOrderReferenceId","design","designMode","scope","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","initializeBilling","remoteAddress","billing","address","internalBillingAddress","is_internal_address_equal","updateAddress","map_from_internal_address","updateCheckout","getAmazonOrderReferenceId","CreditCardPaymentStrategy","PaymentMethodCancelledError","KlarnaPaymentStrategy","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_unsubscribe","subscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","onLoad","init","client_token","show_form","payment_method_invalid_error","authorize","res","approved","payment_method_cancelled_error","LegacyPaymentStrategy","OfflinePaymentStrategy","action","OffsitePaymentStrategy","_shouldSubmitFullPayload","getPaymentStatus","payment_status_types","finalizeOrder","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_isInContextEnabled","loadPaypal","paypal","_paypalSdk","setup","button","environment","testMode","closeFlow","_isAcknowledgedOrFinalized","redirectUrl","getPaymentRedirectUrl","location","assign","initXO","startFlow","SagePayPaymentStrategy","_formPoster","errors","code","postForm","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","UnsupportedBrowserError","SquarePaymentStrategy","_checkoutActionCreator","_paymentStrategyActionCreator","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","orderRequest","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","timeout_error","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","masterpass","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","_paymentInstrumentSelected","_setExternalCheckoutData","all","loadCurrentCheckout","queueId","requestShippingAddress","requestBillingInfo","currencyCode","currency","total","label","storeName","amount","String","subtotal","pending","post","Accept","Content-Type","to_form_url_encoded","provider","JSON","stringify","postalCode","setPostalCode","element","masterpassBtn","elementId","style","NoPaymentDataRequiredPaymentStrategy","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","braintree","_is3dsEnabled","is3dsEnabled","_handleError","_preparePaymentData","_isUsingVaulting","card","ccName","ccNumber","ccType","ccExpiry","month","year","isCreditCardLike","shouldSaveInstrument","tokenizedCard","verifyCard","tokenizeCard","appendSessionId","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","preloadPaypal","storeLanguage","BraintreeVisaCheckoutPaymentStrategy","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","visaCheckoutOptions","braintreevisacheckout","initOptions","collectShipping","visaCheckout","visaInitOptions","on","paymentSuccessPayload","handleSuccess","GooglePayPaymentStrategy","_googlePayPaymentProcessor","_methodId","_googlePayOptions","_getGooglePayOptions","walletButton","_walletButton","addEventListener","_handleWalletButtonClick","removeEventListener","_getPayment","cardInformation","displayWallet","statusCode","googlepaybraintree","googlepaystripe","MissingPayment","card_information","event","preventDefault","bind_decorator","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","_wepayRiskClient","getRiskToken","payloadWithToken","deviceSessionId","credit_card_payment_strategy","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","scriptURI","_getScriptURI","loadScript","AfterPay","promise","cancellable","cancel","race","BraintreePaymentProcessor","_braintreeSDKCreator","_threeDSecureOptions","threeDSecure","getPaypal","requestData","_mapToCreditCard","getClient","client","creditCards","offerCredit","tokenize","enableShippingAddress","flow","useraction","addFrame","removeFrame","get3DS","cancelVerifyCard","verification","cancellable_promise","iframe","processedPayment","getDataCollector","deviceData","teardown","creditCard","streetAddress","address1","address2","cardholderName","number","cvv","ccCvv","expirationDate","country","endpoint","ChasePayEventType","ChasePayPaymentStrategy","_chasePayScriptLoader","_walletEvent$","external_rxjs_","chasepay","_configureWallet","_chasePayClient","subtype","_displayWallet","_createOrder","ChasePay","logoContainer","insertBrandings","color","containers","configure","language","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","sessionToken","showLoadingAnimation","startCheckout","digitalSessionId","take","merchantRequestId","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","toString","substr","accountNum","accountMask","extraData","KlarnaScriptLoader","Klarna","Credit","MasterpassPaymentStrategy","_masterpassScriptLoader","_masterpassClient","_createMasterpassPayload","checkoutId","allowedCardTypes","toFixed","cartId","suppressShippingAddress","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","createPaymentStrategyRegistry","paymentClient","requestSender","registry","payment_strategy_registry","defaultToken","scriptLoader","script_loader_","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","braintreeScriptLoader","braintree_script_loader","braintreeSDKCreator","braintree_sdk_creator","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkout_request_sender","checkoutValidator","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","payment_method_action_creator","payment_method_request_sender","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configRequestSender","config_request_sender","configActionCreator","config_action_creator","checkoutActionCreator","checkout_action_creator","paymentStrategyActionCreator","payment_strategy_action_creator","register","afterpay_payment_strategy","afterpay_script_loader","amazon_pay_payment_strategy","amazon_pay_script_loader","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","paypal_pro_payment_strategy","paypal_express_payment_strategy","paypal_script_loader","sage_pay_payment_strategy","form_poster_","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","braintree_visacheckout_payment_strategy","create_braintree_visacheckout_payment_processor","visacheckout_script_loader","chasepay_payment_strategy","chasepay_script_loader","wepay_risk_client","googlepay_payment_strategy","create_googlepay_payment_processor","googlepay_braintree_initializer","wepay_payment_strategy","masterpass_payment_strategy","masterpass_script_loader","googlepay_stripe_initializer","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","instrument_action_types","session","_getSessionContext","_getCurrentAccessToken","_getShippingAddress","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","valueOf","Date","now","isFuture","newDate","getTime","setMinutes","getMinutes","addMinutes","vaultAccessExpiry","getVaultAccessToken","expires_at","getCart","MissingCart","customerId","storeId","InstrumentResponseTransformer","transformResponse","vaulted_instruments","vaultedInstruments","_transformVaultedInstruments","transformErrorResponse","map","bigpayToken","bigpay_token","iin","last4","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","brand","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","CheckoutStoreSelector","selectors","_billingAddress","_cart","_checkout","_consignments","_countries","countries","_coupons","_customer","_form","form","_giftCertificates","_instruments","_order","_payment","_paymentMethods","_shippingAddress","_shippingCountries","shippingCountries","getConfig","context","firstName","lastName","company","city","stateOrProvince","stateOrProvinceCode","phone","customFields","getShippingOptions","length","availableShippingOptions","getSelectedShippingOption","selectedShippingOption","getShippingCountries","getBillingCountries","getCountries","getPaymentMethods","getSelectedPaymentMethod","getCoupons","getGiftCertificates","isPaymentDataSubmitted","getInstruments","getBillingAddressFields","getShippingAddressFields","selector_decorator","CheckoutStoreErrorSelector","_customerStrategies","customerStrategies","_paymentStrategies","paymentStrategies","_shippingStrategies","shippingStrategies","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getLoadShippingOptionsError","getSelectShippingOptionError","getSignInError","getSignOutError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getContinueAsGuestError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getLoadError","getUpdateCheckoutError","getUpdateError","getExecuteError","getFinalizeError","getLoadMethodError","getInitializeError","consignmentId","getSelectOptionError","getUpdateShippingOptionError","getUpdateAddressError","getDeleteError","getCreateError","getApplyError","getRemoveError","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isLoadingShippingOptions","isSelectingShippingOption","isSigningIn","isSigningOut","isInitializingCustomer","isUpdatingBillingAddress","isContinuingAsGuest","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isApplyingCoupon","isRemovingCoupon","isApplyingGiftCertificate","isRemovingGiftCertificate","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isLoading","isUpdatingCheckout","isUpdating","isExecuting","isFinalizing","isLoadingMethod","isInitializing","isSelectingOption","isUpdatingShippingOption","isUpdatingAddress","isDeleting","isCreating","isApplying","isRemoving","isWidgetInteracting","createCheckoutSelectors","checkout_store_selector","checkout_store_error_selector","statuses","checkout_store_status_selector","ErrorMessageTransformer","_messageCustomizer","transform","input","split","line","replace","trim","toSingleLine","CheckoutService","_configActionCreator","_consignmentActionCreator","_countryActionCreator","_couponActionCreator","_customerStrategyActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","_state","_errorTransformer","isDevelopment","get_environment","error_message_transformer","isCheckoutServiceError","MissingConsignments","MissingOrder","MissingOrderId","CustomerNotInitialized","ShippingNotInitialized","createCheckoutServiceErrorTransformer","notifyState","subscriber","filters","_i","arguments","apply","concat","filter","_dispatch","loadDefaultCheckout","loadOrder","loadCheckoutAction","loadConfigAction","loadConfig","finalizeOrderIfNeeded","loadPaymentMethods","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","credentials","signInCustomer","signIn","signOutCustomer","signOut","loadShippingOptions","initializeShipping","deinitializeShipping","selectShippingOption","shippingOptionId","selectOption","updateShippingAddress","createConsignments","deleteConsignment","updateConsignment","consignment","assignItemsToAddress","assignItemsByAddress","unassignItemsToAddress","unassignItemsByAddress","selectConsignmentShippingOption","updateShippingOption","updateBillingAddress","applyCoupon","removeCoupon","applyGiftCertificate","removeGiftCertificate","createCheckoutService","protocol","get_default_logger","warn","externalSource","shouldWarnMutation","request_sender_","host","create_checkout_store","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","create_customer_strategy_registry","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","create_shipping_strategy_registry","ConfigActionType","LOAD_COUNTRIES_REQUESTED","LOAD_COUNTRIES_SUCCEEDED","LOAD_COUNTRIES_FAILED","LOAD_SHIPPING_COUNTRIES_REQUESTED","LOAD_SHIPPING_COUNTRIES_SUCCEEDED","LOAD_SHIPPING_COUNTRIES_FAILED","parseOrigin","url","test","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","anchor","createElement","href","hostname","port","ACKNOWLEDGE","FINALIZE","DEFAULT_STATE","CustomerActionType","PaymentActionType","HOSTED","OFFLINE","isIframeEvent","CacheKeyResolver","_lastId","_maps","getKey","args","_resolveMap","index","parentMaps","cacheKey","usedCount","_generateKey","slice","getUsedCount","isMatched","parentMaps_1","maps","push","CheckoutButtonErrorSelector","_checkoutButton","checkoutButton","getInitializeButtonError","getDeinitializeButtonError","getDeinitializeError","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","isDeinitializing","createCheckoutButtonSelectors","checkout_button_error_selector","checkout_button_status_selector","CheckoutButtonMethodType","CheckoutButtonInitializer","_buttonStrategyActionCreator","initializeButton","deinitializeButton","CheckoutButtonStrategyActionCreator","_registry","checkout_button_actions","InitializeButtonRequested","InitializeButtonSucceeded","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","DeinitializeButtonFailed","CheckoutButtonStrategy","containerId","BraintreePaypalButtonStrategy","_paypalScriptLoader","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","getPaypalCheckout","paypalCheckout","_paypalCheckout","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","commit","shouldProcessPayment","funding","allowed","disallowed","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","keys","addresses","CheckoutButtonNotInitialized","createPayment","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","tokenizePayment","payment_type","device_data","shipping_address","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","checkout_button_strategy","MasterpassButtonStrategy","_signInButton","_createSignInButton","parentNode","removeChild","buttonContainer","querySelector","src","appendChild","cartAmount","GooglePayButtonStrategy","_getMethodId","googlePayButton","createButton","_onPaymentSelectComplete","_onError","PaypalButtonStrategy","clientId","actions","paymentID","payerID","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","checkout_button_initializer","checkout_button_strategy_action_creator","formPoster","BRAINTREE_PAYPAL","braintree_paypal_button_strategy","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","masterpass_button_strategy","GOOGLEPAY_BRAINTREE","googlepay_button_strategy","GOOGLEPAY_STRIPE","PAYPALEXPRESS","paypal_button_strategy","createCheckoutButtonRegistry","CheckoutActionType","OrderActionType","DEFAULT_RESPONSE","RequestError","Array","isArray","reduce","result","joinErrors","detail","title","tslib__WEBPACK_IMPORTED_MODULE_0__","CheckoutButtonSelector","lodash__WEBPACK_IMPORTED_MODULE_1__","initializeError","deinitializeError","_common_selector__WEBPACK_IMPORTED_MODULE_2__","mapToInternalLineItems","itemMap","decimalPlaces","idKey","item","_map_gift_certificate_to_internal_line_item__WEBPACK_IMPORTED_MODULE_0__","_map_to_internal_line_item__WEBPACK_IMPORTED_MODULE_1__","mapToInternalLineItemType","createActionTransformer","requestErrorFactory","action$","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_1__","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","every","isResponse","createError","CheckoutSelector","loadError","updateError","_common_selector__WEBPACK_IMPORTED_MODULE_1__","checkoutReducer","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","dataReducer","errorsReducer","statusesReducer","reducer","_checkout_actions__WEBPACK_IMPORTED_MODULE_8__","LoadCheckoutSucceeded","UpdateCheckoutSucceeded","_billing__WEBPACK_IMPORTED_MODULE_3__","UpdateBillingAddressSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_4__","ApplyCouponSucceeded","RemoveCouponSucceeded","_shipping__WEBPACK_IMPORTED_MODULE_7__","CreateConsignmentsSucceeded","UpdateConsignmentSucceeded","DeleteConsignmentSucceeded","UpdateShippingOptionSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","lodash__WEBPACK_IMPORTED_MODULE_2__","_order__WEBPACK_IMPORTED_MODULE_6__","SubmitOrderSucceeded","LoadCheckoutRequested","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutFailed","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","_checkout_button_actions__WEBPACK_IMPORTED_MODULE_2__","mapGiftCertificateToInternalLineItem","amountTransformer","___WEBPACK_IMPORTED_MODULE_0__","imageUrl","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapToInternalLineItem","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","categoryNames","productId","option","addedByPromotion","BillingAddressSelector","continueAsGuestError","createFreezeProxy","target","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","getOwnPropertyNames","forEach","charAt","createProxy","ConfigSelector","getExternalSource","FormSelector","selectedCountry","formFields","shippingAddressFields","field","_processField","billingAddressFields","_processCountry","_processProvince","_processsPostCode","items","default","fieldType","itemtype","subdivisions","required","hasPostalCodes","CountrySelector","PaymentSelector","internalPayment","_getInternalPayment","_getHostedPayment","_getGatewayPayment","step","storeCredit","payments","providerType","PaymentMethodSelector","loadMethodId","loadMethodError","PaymentStrategySelector","payment_strategy_state","initializeMethodId","executeMethodId","executeError","finalizeMethodId","finalizeError","getWidgetInteractingError","widgetInteractionMethodId","widgetInteractionError","InstrumentSelector","failedInstrument","deleteError","deletingInstrument","RemoteCheckoutSelector","_remoteCheckout","createInternalCheckoutSelectors","billing_address_selector","cart_selector","checkout_button_selector","config_selector","country_selector","coupon_selector","customer_selector","customer_strategy_selector","form_selector","gift_certificate_selector","instrument_selector","payment_method_selector","payment_strategy_selector","shipping_address_selector","remote_checkout_selector","shipping_country_selector","shipping_strategy_selector","consignment_selector","checkout_selector","order_selector","payment_selector","createFreezeProxies","mapToInternalCart","amount_transformer","map_to_internal_line_items","lineItems","coupon","discountedAmount","sum","map_to_internal_coupon","discountNotifications","promotions","notifications","promotion","banners","banner","placeholders","discountType","messageHtml","text","mapToDiscountNotifications","giftCertificate","totalDiscountedAmount","certificate","used","appliedGiftCertificates","map_to_internal_gift_certificate","shipping","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","physicalItems","lineItem","isShippingRequired","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","objectA","objectB","length_1","isArrayEqual","isDateEqual","RegExp","isRegExpEqual","keyFilter","keysA","keysB","length_2","isObjectEqual","selectorDecorator","decoratedTarget","class_1","descriptor","getOwnPropertyDescriptor","resolver","cache_key_resolver","memoizedMethod","cachedValue","newValue","is_private","cache","set","selectorMethodDecorator","PaymentMethodInvalidError","CheckoutRequestSender","params","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","JsonV1","include","_checkout_default_includes__WEBPACK_IMPORTED_MODULE_1__","put","CheckoutActionCreator","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_1__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_4__","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","_checkout_actions__WEBPACK_IMPORTED_MODULE_10__","rxjs_observable_merge__WEBPACK_IMPORTED_MODULE_3__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_5__","_common_error__WEBPACK_IMPORTED_MODULE_7__","_common_error_errors__WEBPACK_IMPORTED_MODULE_8__","rxjs_Observable__WEBPACK_IMPORTED_MODULE_6__","_common_error_errors__WEBPACK_IMPORTED_MODULE_9__","DEFAULT_PARAMS","ConsignmentRequestSender","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","delete","PaymentMethodActionCreator","rxjs_Observable__WEBPACK_IMPORTED_MODULE_1__","_payment_method_actions__WEBPACK_IMPORTED_MODULE_2__","LoadPaymentMethodsRequested","sessionHash","LoadPaymentMethodsSucceeded","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","PaymentMethodRequestSender","X-API-INTERNAL","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_parse_origin__WEBPACK_IMPORTED_MODULE_3__","_isListening","_listeners","listen","_handleMessage","stopListen","addListener","listener","listeners","removeListener","indexOf","splice","trigger","origin","_is_iframe_event__WEBPACK_IMPORTED_MODULE_2__","_common_utility__WEBPACK_IMPORTED_MODULE_1__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","_parse_origin__WEBPACK_IMPORTED_MODULE_0__","postMessage","setTarget","UnrecoverableError","RequestErrorFactory","_factoryMethods","factoryMethod","_getType","billingAddressReducer","billing_address_actions","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","paymentReducer","payment_reducer_dataReducer","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","array","predicate","newArray","mergeOrPush","paymentStrategyReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","deinitializeMethodId","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_action_types","createCheckoutStore","initialState","actionTransformer","create_action_transformer","factory","request_error_factory","unrecoverable_error","createRequestErrorFactory","cart_reducer","checkout_reducer","checkout_button_reducer","consignment_reducer","coupon_reducer","customer_reducer","customer_strategy_reducer","gift_certificate_reducer","order_reducer","shipping_country_reducer","shipping_strategy_reducer","stateTransformer","create_internal_checkout_selectors","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_options","_isAttached","onComplete","embedded_checkout_events","CheckoutComplete","CheckoutError","CheckoutLoaded","onFrameLoad","FrameLoaded","_configureStyles","attach","show","createFrame","_iframe","hide","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","DEFAULT_STYLES","size","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","visibility","opacity","handleTransitionEnd","bottom","left","height","width","position","right","top","transition","indicator","borderRadius","border","borderColor","margin","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","NotEmbeddableError","ResizableIframeCreator","not_embeddable_error","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","parse_origin","is_iframe_event","iframes","external_iframe_resizer_","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","embedCheckout","embedded_checkout","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","CheckoutIncludes","consignment_action_creator_ConsignmentActionCreator","ConsignmentActionCreator","_consignmentRequestSender","existingConsignment","getConsignmentByAddress","_removeLineItems","_createOrUpdateConsignment","_addLineItems","consignmentUpdateBody","consignmentMeta","consignment_actions","UpdateShippingOptionRequested","UpdateShippingOptionFailed","LoadShippingOptionsRequested","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","_getConsignmentRequestBody","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","_isUpdateConsignmentRequest","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","CartSelector","CouponSelector","_coupon","removeCouponError","applyCouponError","CustomerSelector","CustomerStrategySelector","signInMethodId","signInError","signOutMethodId","signOutError","getWidgetInteractionError","GiftCertificateSelector","_giftCertificate","removeGiftCertificateError","applyGiftCertificateError","ShippingAddressSelector","ShippingCountrySelector","ShippingStrategySelector","updateAddressMethodId","updateAddressError","selectOptionMethodId","selectOptionError","ConsignmentSelector","getConsignmentById","_address__WEBPACK_IMPORTED_MODULE_2__","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","updateShippingOptionError","isAssigningItems","_common_selector__WEBPACK_IMPORTED_MODULE_3__","isAddressEqual","addressA","addressB","lodash__WEBPACK_IMPORTED_MODULE_0__","normalize","OrderSelector","cartReducer","_billing_billing_address_actions__WEBPACK_IMPORTED_MODULE_2__","_checkout__WEBPACK_IMPORTED_MODULE_3__","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","_coupon_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_coupon_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","consignmentReducer","_checkout__WEBPACK_IMPORTED_MODULE_2__","_consignment_actions__WEBPACK_IMPORTED_MODULE_4__","_customer__WEBPACK_IMPORTED_MODULE_3__","SignOutCustomerSucceeded","couponReducer","_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_order__WEBPACK_IMPORTED_MODULE_3__","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","customerReducer","giftCertificateReducer","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_3__","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","orderReducer","_order_actions__WEBPACK_IMPORTED_MODULE_3__","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","callbackUrl","orderToken","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","shippingCountryReducer","_shipping_country_action_types__WEBPACK_IMPORTED_MODULE_2__","CustomerStrategyActionCreator","_customer_strategy_actions__WEBPACK_IMPORTED_MODULE_2__","SignInRequested","SignInSucceeded","SignInFailed","SignOutRequested","SignOutSucceeded","SignOutFailed","BraintreeScriptLoader","loadClient","load3DS","loadDataCollector","dataCollector","loadPaypalCheckout","loadVisaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","authorization","_paypal","_3ds","cached","kount","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","mod","CustomerActionCreator","_customerRequestSender","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_3__","_customer_actions__WEBPACK_IMPORTED_MODULE_6__","SignInCustomerRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_4__","SignInCustomerSucceeded","_common_error__WEBPACK_IMPORTED_MODULE_5__","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerFailed","CustomerRequestSender","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","isGuest","fullName","AmountTransformer","_dp","Math","floor","pow","mapToInternalCoupon","couponTypes","displayName","couponType","mapToInternalGiftCertificate","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_cart__WEBPACK_IMPORTED_MODULE_2__","customerCanBeCreated","isDefaultOrderPayment","mapToInternalPaymentStatus","helpText","instructions","returnUrl","mapToInteralOrderPayment","baseAmount","_coupon__WEBPACK_IMPORTED_MODULE_3__","mapToGiftCertificates","socialData","socialDataObject","digitalItems","socialMedia","image","link","shareText","sharingLink","channelName","channel","channelCode","mapToInternalSocialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","postCode","customerStrategyReducer","customer_strategy_actions","shippingStrategyReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","SelectOptionFailed","bindDecorator","bindMethodDecorator","bindClassDecorator","boundMethod","isPrivate","OrderRequestSender","OrderActionCreator","_orderRequestSender","rxjs_Observable__WEBPACK_IMPORTED_MODULE_7__","_order_actions__WEBPACK_IMPORTED_MODULE_10__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_3__","_getCurrentOrderId","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_5__","SubmitOrderRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_4__","_mapToOrderRequestBody","customerMessage","rxjs_operators__WEBPACK_IMPORTED_MODULE_6__","_common_error__WEBPACK_IMPORTED_MODULE_8__","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","CartComparator","cartA","cartB","_normalize","giftWrapping","InvalidArgumentError","CouponActionCreator","_couponRequestSender","_common_error_errors__WEBPACK_IMPORTED_MODULE_2__","_coupon_actions__WEBPACK_IMPORTED_MODULE_3__","CouponRequestSender","couponCode","_checkout__WEBPACK_IMPORTED_MODULE_0__","GiftCertificateActionCreator","_giftCertificateRequestSender","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_3__","GiftCertificateRequestSender","giftCertificateCode","mapFromInternalAddress","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","rxjs_Observable__WEBPACK_IMPORTED_MODULE_2__","_shipping_strategy_actions__WEBPACK_IMPORTED_MODULE_3__","mergedOptions","NotImplementedError","CustomerStrategy","AmazonPayCustomerStrategy","_remoteCheckoutRequestSender","not_implemented_error","useAmazonAddressBook","_handleAuthorization","generateToken","Login","popup","tokenPrefix","trackAuthorizationEvent","customer_strategy","BraintreeVisaCheckoutCustomerStrategy","_buttonClassName","signInButton","buttonClass","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","chasePayOptions","JPMC","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","COMPLETE_CHECKOUT","requestId","_reloadPage","sendRequest","fromChasePay","SquareCustomerStrategy","MasterpassCustomerStrategy","masterpassOptions","Masterpass","GooglePayCustomerStrategy","googlePayOptions","DefaultCustomerStrategy","_customerActionCreator","createCustomerStrategyRegistry","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","googlepay_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","ShippingStrategy","AmazonPayShippingStrategy","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","shipping_strategy","DefaultShippingStrategy","createShippingStrategyRegistry","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","omitPrivate","omitDeep","isInternalAddressEqual","ignoredKeys","INTERNAL_USE_ONLY","TimeoutError","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_2__","ConfigRequestSender","MissingDataErrorType","MissingDataError","MissingBillingAddress","MissingOrderConfig","getErrorMessage","_standard_error__WEBPACK_IMPORTED_MODULE_1__","throwErrorAction","isErrorAction","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_throw__WEBPACK_IMPORTED_MODULE_3__","NotInitializedErrorType","NotInitializedError","BillingAddressActionCreator","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","_getInstance","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","toFormUrlEncoded","encodeURIComponent","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","parse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","transactionInfo","totalPriceStatus","totalPrice","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","googleMerchantId","googleMerchantName","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","PaypalScriptLoader","isCustomError","IframeEmbeddedCheckoutMessenger","postComplete","postError","_transformError","postFrameError","postFrameLoaded","postLoaded","receiveStyles","handler","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parent","noop_embedded_checkout_messenger","iframe_embedded_checkout_messenger","parentOrigin","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","abs","decimalAmount","parsedIntegerAmount","decimalPadding","toLowerCase","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","parseFloat","toStoreCurrency","createCurrencyService","currency_service","ButtonType","ButtonColor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","onClick","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_postForm","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","_getCardInformation","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","info","companyName","address3","locality","administrativeArea","phoneNumber","postPaymentData","remoteBillingAddress","googlePayAddressMapped","GooglePayScriptLoader","createGooglePayPaymentProcessor","initializer","googlepay_payment_processor","googlepay_script_loader","getEnvironment","process","NODE_ENV","e","RemoteCheckoutRequestSender","methodName","RemoteCheckoutActionCreator","_remote_checkout_action_types__WEBPACK_IMPORTED_MODULE_2__","AmazonPayScriptLoader","onPaymentReady","region","_configureWidget","onLoginReady","setClientId","setUseCookie","onAmazonLoginReady","onAmazonPaymentsReady","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","ConsoleLogger","_console","log","messages","_logToConsole","debug","NoopLogger","logger","isEnabled","console_logger","console","noop_logger","createLogger","getDefaultLogger","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","paymentRequest","braintreeVisaCheckout","tokenizedPayload","_toVisaCheckoutAddress","userData","userEmail","_getAddress","extendedAddress","createBraintreeVisaCheckoutPaymentProcessor","braintree_visacheckout_payment_processor"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 174);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs/Observable\");","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<Error> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<Error> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","export const LOAD_INSTRUMENTS_REQUESTED = 'LOAD_INSTRUMENTS_REQUESTED';\nexport const LOAD_INSTRUMENTS_SUCCEEDED = 'LOAD_INSTRUMENTS_SUCCEEDED';\nexport const LOAD_INSTRUMENTS_FAILED = 'LOAD_INSTRUMENTS_FAILED';\n\nexport const DELETE_INSTRUMENT_REQUESTED = 'DELETE_INSTRUMENT_REQUESTED';\nexport const DELETE_INSTRUMENT_SUCCEEDED = 'DELETE_INSTRUMENT_SUCCEEDED';\nexport const DELETE_INSTRUMENT_FAILED = 'DELETE_INSTRUMENT_FAILED';\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","module.exports = require(\"rxjs/operators\");","module.exports = require(\"rxjs/observable/concat\");","module.exports = require(\"rxjs/observable/of\");","export const INITIALIZE_REMOTE_BILLING_REQUESTED = 'INITIALIZE_REMOTE_BILLING_REQUESTED';\nexport const INITIALIZE_REMOTE_BILLING_SUCCEEDED = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED';\nexport const INITIALIZE_REMOTE_BILLING_FAILED = 'INITIALIZE_REMOTE_BILLING_FAILED';\n\nexport const INITIALIZE_REMOTE_SHIPPING_REQUESTED = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED';\nexport const INITIALIZE_REMOTE_SHIPPING_SUCCEEDED = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED';\nexport const INITIALIZE_REMOTE_SHIPPING_FAILED = 'INITIALIZE_REMOTE_SHIPPING_FAILED';\n\nexport const INITIALIZE_REMOTE_PAYMENT_REQUESTED = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED';\nexport const INITIALIZE_REMOTE_PAYMENT_SUCCEEDED = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED';\nexport const INITIALIZE_REMOTE_PAYMENT_FAILED = 'INITIALIZE_REMOTE_PAYMENT_FAILED';\n\nexport const LOAD_REMOTE_SETTINGS_REQUESTED = 'LOAD_REMOTE_SETTINGS_REQUESTED';\nexport const LOAD_REMOTE_SETTINGS_SUCCEEDED = 'LOAD_REMOTE_SETTINGS_SUCCEEDED';\nexport const LOAD_REMOTE_SETTINGS_FAILED = 'LOAD_REMOTE_SETTINGS_FAILED';\n\nexport const SIGN_OUT_REMOTE_CUSTOMER_REQUESTED = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED';\nexport const SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED';\nexport const SIGN_OUT_REMOTE_CUSTOMER_FAILED = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED';\n\nexport const UPDATE_REMOTE_CHECKOUT = 'UPDATE_REMOTE_CHECKOUT';\n","export enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n}\n\nexport interface EmbeddedCheckoutError {\n    message: string;\n    type?: string;\n    subtype?: string;\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport * as actionTypes from './country-action-types';\nimport CountryRequestSender from './country-request-sender';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(actionTypes.LOAD_COUNTRIES_REQUESTED));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_COUNTRIES_SUCCEEDED, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_COUNTRIES_FAILED, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { empty } from 'rxjs/observable/empty';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport Payment from './payment';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as Payment, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get('nopaymentdatarequired');\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { InvalidArgumentError, StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(payment: Payment): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store =>\n            Observable.create((observer: Observer<InitializeOffsitePaymentAction>) => {\n                observer.next(createAction(PaymentActionType.InitializeOffsitePaymentRequested));\n\n                return this._paymentRequestSender.initializeOffsitePayment(\n                    this._getPaymentRequestBody(payment, store.getState())\n                )\n                    .then(() => {\n                        observer.next(createAction(PaymentActionType.InitializeOffsitePaymentSucceeded));\n                        observer.complete();\n                    })\n                    .catch(() => {\n                        observer.error(createErrorAction(PaymentActionType.InitializeOffsitePaymentFailed));\n                    });\n            });\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        if (!payment.paymentData) {\n            throw new InvalidArgumentError('Unable to construct payment request because `payment.paymentData` is not provided.');\n        }\n\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(payment, state.paymentMethods);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(payment: Payment, paymentMethodSelector: PaymentMethodSelector): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): string {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactory(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return 'offline';\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return 'legacy';\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return 'offsite';\n        }\n\n        return 'creditcard';\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderRequestBody } from '../../order';\nimport { OrderFinalizationNotRequiredError } from '../../order/errors';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../payment-request-options';\n\nexport default abstract class PaymentStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy extends PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWidgetError from './amazon-pay-widget-error';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._walletOptions = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the Amazon Pay payment\n * method.\n *\n * When AmazonPay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface AmazonPayPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the payment options.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the customer selects one of the payment\n     * options provided by the widget.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onPaymentSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class CreditCardPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor() {\n        super('Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaLoadResponse } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy extends PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    () => this._isInitialized && this._loadWidget(options),\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaCredit.authorize({}, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n\n/**\n * A set of options that are required to initialize the Klarna payment method.\n *\n * When Klarna is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface KlarnaPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param response - The result of the initialization. It indicates whether\n     * or not the widget is loaded successfully.\n     */\n    onLoad?(response: KlarnaLoadResponse): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class LegacyPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OfflinePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OffsitePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy extends PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!this._isInContextEnabled() || this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize();\n        }\n\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return super.deinitialize();\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        window.location.assign(redirectUrl);\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { RequestError } from '../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class SagePayPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\n\nimport { PaymentStrategy } from '../';\nimport {\n    NonceInstrument,\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator\n} from '../../';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\n\nimport { SquarePaymentForm, SquareScriptLoader } from '.';\nimport {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\n\nexport default class SquarePaymentStrategy extends PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(errors?: NonceGenerationError[], nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): void {\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(this._paymentMethod.id, nonce, cardData, billingContact, shippingContact)\n                .then(() => this._squareOptions && this._squareOptions.onPaymentSelect && this._squareOptions.onPaymentSelect())\n                .catch(error => this._squareOptions && this._squareOptions.onError && this._squareOptions.onError(error));\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n            this._deferredRequestNonce.reject(errors);\n        } else if (nonce) {\n            this._deferredRequestNonce.resolve({ nonce });\n        }\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            }),\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n}\n","import { Payment, PaymentMethodActionCreator } from '../..';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy extends PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return super.initialize(options);\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const checkout = state.checkout.getCheckout();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, checkout.grandTotal) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccType === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreePaypalPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return super.initialize(options);\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => super.initialize(options))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(checkout.grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","import {\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator,\n} from '../..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '.';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n\n/**\n * A set of options that are required to initialize the Visa Checkout payment\n * method provided by Braintree.\n *\n * If the customer chooses to pay with Visa Checkout, they will be asked to\n * enter their payment details via a modal. You can hook into events emitted by\n * the modal by providing the callbacks listed below.\n */\nexport interface BraintreeVisaCheckoutPaymentInitializeOptions {\n    /**\n     * A callback that gets called when Visa Checkout fails to initialize or\n     * selects a payment option.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: Error): void;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy extends PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return super.initialize(options);\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(payment =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => paypal.tokenize({\n                amount,\n                currency,\n                enableShippingAddress: true,\n                flow: 'checkout',\n                locale: storeLanguage,\n                offerCredit,\n                useraction: 'commit',\n            }));\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy extends PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store);\n\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$.take(1)\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            }),\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { PaymentStrategy } from '../';\nimport {\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions\n} from '../../';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\n\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy extends PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return super.initialize(options);\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const gateway = this._paymentMethod.initializationData.gateway;\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        if (!gateway) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.gateway\" argument is not provided.');\n        }\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(gateway)))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ methodId: gateway, paymentData })));\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: true,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport {\n    AfterpayPaymentStrategy,\n    AmazonPayPaymentStrategy,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeVisaCheckoutPaymentStrategy,\n    CreditCardPaymentStrategy,\n    GooglePayPaymentStrategy,\n    KlarnaPaymentStrategy,\n    LegacyPaymentStrategy,\n    NoPaymentDataRequiredPaymentStrategy,\n    OfflinePaymentStrategy,\n    OffsitePaymentStrategy,\n    PaypalExpressPaymentStrategy,\n    PaypalProPaymentStrategy,\n    SagePayPaymentStrategy,\n    SquarePaymentStrategy,\n    WepayPaymentStrategy,\n} from './strategies';\nimport { AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from './strategies/googlepay';\nimport { KlarnaScriptLoader } from './strategies/klarna';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { PaypalScriptLoader } from './strategies/paypal';\nimport { SquareScriptLoader } from './strategies/square';\nimport { WepayRiskClient } from './strategies/wepay';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: 'creditcard' });\n    const scriptLoader = getScriptLoader();\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        checkoutValidator\n    );\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(paymentClient),\n        orderActionCreator\n    );\n\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        new RemoteCheckoutRequestSender(requestSender)\n    );\n    const configRequestSender = new ConfigRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(configRequestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n\n    registry.register('afterpay', () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('amazon', () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('creditcard', () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('klarna', () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('legacy', () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offline', () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offsite', () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypal', () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypalexpress', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('paypalexpresscredit', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('sagepay', () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            createFormPoster()\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('nopaymentdatarequired', () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('braintree', () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypal', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypalcredit', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register('wepay', () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator);\n}\n","import { createAction, createErrorAction, Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport * as actionTypes from './instrument-action-types';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<Action, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_INSTRUMENTS_REQUESTED));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(actionTypes.LOAD_INSTRUMENTS_SUCCEEDED, body, currentToken));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_INSTRUMENTS_FAILED, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<Action, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.DELETE_INSTRUMENT_REQUESTED, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({ ...session, authToken: currentToken.vaultAccessToken }, instrumentId)\n                        .then(() => {\n                            observer.next(createAction(actionTypes.DELETE_INSTRUMENT_SUCCEEDED, undefined, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.DELETE_INSTRUMENT_FAILED, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token)\n            ? Promise.resolve(token)\n            : this._instrumentRequestSender.getVaultAccessToken()\n                .then(({ body = {} }: any) => ({\n                    vaultAccessToken: body.data.token,\n                    vaultAccessExpiry: body.data.expires_at,\n                }));\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n\n        return {\n            customerId,\n            storeId,\n        };\n    }\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport Instrument from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    RawInstrumentsResponseBody,\n    RawInstrumentErrorResponseBody,\n    RawInstrumentResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(response: Response<RawInstrumentsResponseBody>): Response<InstrumentsResponseBody> {\n        const payload = this._transformResponse(response);\n        const { vaulted_instruments } = payload.body;\n\n        payload.body = {\n            vaultedInstruments: this._transformVaultedInstruments(vaulted_instruments),\n        };\n\n        return payload;\n    }\n\n    transformErrorResponse(response: Response<RawInstrumentErrorResponseBody>): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: RawInstrumentResponseBody[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse({ data: body, status, statusText }: any): Response {\n        return {\n            headers: {},\n            body,\n            status,\n            statusText,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\n\nimport { InstrumentRequestContext } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    RawInstrumentsResponseBody,\n    RawInstrumentErrorResponseBody,\n    VaultAccessTokenResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken({ timeout }: RequestOptions = {}): Promise<Response<VaultAccessTokenResponseBody>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    loadInstruments(requestContext: InstrumentRequestContext, shippingAddress?: Address): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(requestContext: InstrumentRequestContext, instrumentId: string): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(payload, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n\n    private _loadInstruments(requestContext: InstrumentRequestContext): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(requestContext, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n\n    private _loadInstrumentsWithAddress(requestContext: InstrumentRequestContext, shippingAddress: Address): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(payload, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): Address | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): Error | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): Error | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     methodId: 'braintree',\n     *     payment: {\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccType: 'visa',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","export const LOAD_COUNTRIES_REQUESTED = 'LOAD_COUNTRIES_REQUESTED';\nexport const LOAD_COUNTRIES_SUCCEEDED = 'LOAD_COUNTRIES_SUCCEEDED';\nexport const LOAD_COUNTRIES_FAILED = 'LOAD_COUNTRIES_FAILED';\n","export const LOAD_SHIPPING_COUNTRIES_REQUESTED = 'LOAD_SHIPPING_COUNTRIES_REQUESTED';\nexport const LOAD_SHIPPING_COUNTRIES_SUCCEEDED = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED';\nexport const LOAD_SHIPPING_COUNTRIES_FAILED = 'LOAD_SHIPPING_COUNTRIES_FAILED';\n","module.exports = require(\"rxjs/observable/defer\");","import { InvalidArgumentError } from '../common/error/errors';\n\nexport default function parseOrigin(url: string): string {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return `${anchor.protocol}//${anchor.hostname}` + (anchor.port ? `:${anchor.port}` : '');\n}\n","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"@bigcommerce/request-sender\");","module.exports = require(\"@bigcommerce/script-loader\");","module.exports = require(\"rxjs/observable/from\");","export default interface PaymentStrategyState {\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","const DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default DEFAULT_INCLUDES;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","export default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (map.value !== args[index]) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.initialize(options);\n\n        return this._store.dispatch(action, { queueId: `${options.methodId}ButtonStrategy` })\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n\n        return this._store.dispatch(action, { queueId: `${options.methodId}ButtonStrategy` })\n            .then(() => this.getState());\n    }\n}\n","export enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { empty } from 'rxjs/observable/empty';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction> {\n        return store => {\n            const meta = { methodId: options.methodId };\n            const { paymentMethods } = store.getState();\n            const paymentMethod = paymentMethods.getPaymentMethod(options.methodId);\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                paymentMethod ?\n                    empty() :\n                    this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, options),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Observable<DeinitializeButtonAction> {\n        const meta = { methodId: options.methodId };\n\n        return concat(\n            of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n            defer(() => this._registry.get(options.methodId).deinitialize()\n                .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n        );\n    }\n}\n","import { CheckoutButtonInitializeOptions } from '../checkout-button-options';\n\nexport default abstract class CheckoutButtonStrategy {\n    protected _isInitialized: { [key: string]: boolean } = {};\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        this._isInitialized[options.containerId] = true;\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        this._isInitialized = {};\n\n        return Promise.resolve();\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod } from '../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../checkout-button-options';\n\nimport CheckoutButtonStrategy from './checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy extends CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        if (this._isInitialized[options.containerId]) {\n            return super.initialize(options);\n        }\n\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<void> {\n        if (!Object.keys(this._isInitialized).length) {\n            return super.deinitialize();\n        }\n\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return super.deinitialize();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { CheckoutButtonInitializeOptions } from '../';\nimport { CheckoutActionCreator, CheckoutStore } from '../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../common/error/errors';\nimport { bindDecorator as bind } from '../../common/utility';\nimport { Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../payment/strategies/masterpass';\n\nimport CheckoutButtonStrategy from './checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy extends CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        if (this._isInitialized[containerId]) {\n            return super.initialize(options);\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n\n                return super.initialize(options);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (!this._isInitialized) {\n            return super.deinitialize();\n        }\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return super.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.querySelector(`#${containerId}`);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: true,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy extends CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        if (this._isInitialized[containerId]) {\n            return super.initialize(options);\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId())\n                .then(() => {\n                    this._walletButton = this._createSignInButton(containerId);\n                })\n            ).then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<void> {\n        if (!this._isInitialized) {\n            return super.deinitialize();\n        }\n\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize());\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n                .then(() => this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress)))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutStore } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod } from '../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken } from '../../payment/strategies/paypal';\nimport { PaypalScriptLoader } from '../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../checkout-button-options';\n\nimport CheckoutButtonStrategy from './checkout-button-strategy';\n\nexport default class PaypalButtonStrategy extends CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        if (this._isInitialized[options.containerId]) {\n            return super.initialize(options);\n        }\n\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (data, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<void> {\n        if (!Object.keys(this._isInitialized).length) {\n            return super.deinitialize();\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return actions.request.post('/api/storefront/paypal-payment/', { merchantId })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        onError?: (error: StandardError) => void\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @alpha\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host: options && options.host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\n\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport {\n    BraintreePaypalButtonStrategy,\n    CheckoutButtonMethodType,\n    CheckoutButtonStrategy,\n    GooglePayButtonStrategy,\n    MasterpassButtonStrategy,\n    PaypalButtonStrategy\n} from './strategies';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    return registry;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n    statusText: '',\n};\n\nexport default class RequestError extends StandardError {\n    body: any;\n    headers: { [key: string]: any; };\n    status: number;\n    statusText: string;\n\n    constructor({ body = {}, headers, status, statusText }: Response = DEFAULT_RESPONSE, message?: string) {\n        super(joinErrors(body.errors) || body.detail || body.title || message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.statusText = statusText;\n    }\n}\n\nfunction joinErrors(errors: Array<string | { code: string, message: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (typeof error === 'string') {\n            return [...result, error];\n        }\n\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from } from 'rxjs/observable/from';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, Subscribable } from 'rxjs/Observable';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            throw { ...action, payload: requestErrorFactory.createError(action.payload) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    errors: {},\n    statuses: {},\n};\n\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getExternalSource(): string | undefined {\n        return this._config.meta && this._config.meta.externalSource;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const checkout = this._checkout.getCheckout();\n\n        if (!checkout) {\n            return false;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return (useStoreCredit ? grandTotal - storeCredit : grandTotal) > 0;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport { AmountTransformer } from '.';\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate } from '../utility';\n\nimport CacheKeyResolver from './cache-key-resolver';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'There is a problem processing your payment. Please try again later.');\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CheckoutDefaultIncludes from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { merge } from 'rxjs/observable/merge';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig()(store),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig()(store),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options)(store);\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","module.exports = require(\"rxjs/observable/empty\");","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\nimport parseOrigin from './parse-origin';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseOrigin(sourceOrigin);\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","import parseOrigin from './parse-origin';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = parseOrigin(targetOrigin);\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, message || 'An unexpected error has occurred. The checkout process cannot continue as a result.');\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): Error {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (response.body && typeof response.body.type === 'string') {\n            return last(response.body.type.split('/')) || 'default';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        return error && error.code ? error.code : 'default';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => Error;\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState, CheckoutAction | BillingAddressAction | OrderAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: LoadConfigAction\n): ConfigState {\n    const reducer = combineReducers<ConfigState, LoadConfigAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\nimport * as actionTypes from './country-action-types';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action\n */\nexport default function countryReducer(state: CountryState = DEFAULT_STATE, action: Action): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Country[] | undefined, action: Action): Country[] | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(errors: CountryErrorsState = DEFAULT_STATE.errors, action: Action): CountryErrorsState {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_REQUESTED:\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.LOAD_COUNTRIES_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: CountryStatusesState = DEFAULT_STATE.statuses, action: Action): CountryStatusesState {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n    case actionTypes.LOAD_COUNTRIES_FAILED:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T extends object>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: PaymentStrategyAction\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport * as actionTypes from './instrument-action-types';\n\nimport Instrument from './instrument';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(state: InstrumentState = DEFAULT_STATE, action: Action): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Instrument[] = DEFAULT_STATE.data, action: Action): Instrument[] {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n        return action.payload.vaultedInstruments || [];\n\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(meta: InstrumentMeta | undefined, action: Action): InstrumentMeta | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(errors: InstrumentErrorState = DEFAULT_STATE.errors, action: Action): InstrumentErrorState {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_REQUESTED:\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.DELETE_INSTRUMENT_REQUESTED:\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case actionTypes.LOAD_INSTRUMENTS_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    case actionTypes.DELETE_INSTRUMENT_FAILED:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: InstrumentStatusState = DEFAULT_STATE.statuses, action: Action): InstrumentStatusState {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.DELETE_INSTRUMENT_REQUESTED:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n    case actionTypes.LOAD_INSTRUMENTS_FAILED:\n        return { ...statuses, isLoading: false };\n\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n    case actionTypes.DELETE_INSTRUMENT_FAILED:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { AfterpayRemoteCheckout, AmazonPayRemoteCheckout } from './methods';\n\nimport * as actionTypes from './remote-checkout-action-types';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\ntype RemoteCheckout = AfterpayRemoteCheckout | AmazonPayRemoteCheckout;\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: Action\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = {},\n    action: Action\n): RemoteCheckout {\n    switch (action.type) {\n    case actionTypes.INITIALIZE_REMOTE_BILLING_SUCCEEDED:\n        return { ...data, billing: action.payload.billing };\n\n    case actionTypes.INITIALIZE_REMOTE_SHIPPING_SUCCEEDED:\n        return { ...data, shipping: action.payload.shipping };\n\n    case actionTypes.LOAD_REMOTE_SETTINGS_SUCCEEDED:\n        return { ...data, settings: action.payload };\n\n    case actionTypes.UPDATE_REMOTE_CHECKOUT:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { IFrameComponent } from 'iframe-resizer';\n\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._iframeCreator.createFrame(this._options.url, this._options.containerId)\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n\n                return this;\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                this._messageListener.trigger({\n                    type: EmbeddedCheckoutEventType.FrameError,\n                    payload: error,\n                });\n\n                this._loadingIndicator.hide();\n\n                throw error;\n            });\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.type = 'not_embeddable';\n    }\n}\n","import { iframeResizer, IFrameComponent } from 'iframe-resizer';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError } from './errors';\nimport isIframeEvent from './is-iframe-event';\nimport parseOrigin from './parse-origin';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError('Unable to embed the iframe because the container element could not be found.');\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseOrigin(iframe.src)) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport parseOrigin from './parse-origin';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @alpha\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseOrigin(options.url);\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: CouponAction | CheckoutAction | OrderAction\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: OrderAction\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nimport * as actionTypes from './shipping-country-action-types';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action\n */\nexport default function shippingCountryReducer(state: ShippingCountryState = DEFAULT_STATE, action: Action): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        errors: errorsReducer,\n        data: dataReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Country[] | undefined, action: Action): Country[] | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(errors: ShippingCountryErrorsState = DEFAULT_STATE.errors, action: Action): ShippingCountryErrorsState {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED:\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses, action: Action): ShippingCountryStatusesState {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","module.exports = require(\"rxjs/observable/throw\");","module.exports = require(\"rxjs/observable/merge\");","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): Observable<CustomerStrategyInitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Observable<CustomerStrategyDeinitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","export default class AmountTransformer {\n    constructor(private _dp: number) {}\n\n    toInteger(amount: number): number {\n        return Math.floor(amount * Math.pow(10, this._dp));\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer, LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","module.exports = require(\"iframe-resizer\");","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","export default interface CustomerStrategyState {\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: CustomerStrategyAction\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: ShippingStrategyAction\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage, externalSource), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string, externalSource?: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                })),\n                giftCertificates: cart.lineItems.giftCertificates.map(item => ({\n                    amount: item.amount,\n                    recipient: item.recipient,\n                })),\n                physicalItems: cart.lineItems.physicalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                    giftWrapping: item.giftWrapping,\n                })),\n            },\n        };\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport * as actionTypes from './shipping-country-action-types';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerCredentials from '../customer-credentials';\n\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nexport default abstract class CustomerStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class AmazonPayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\n/**\n * A set of options that are required to initialize the customer step of\n * checkout to support Amazon Pay.\n *\n * When AmazonPay is initialized, a sign-in button will be inserted into the\n * DOM. When the customer clicks on it, they will be redirected to Amazon to\n * sign in.\n */\nexport interface AmazonPayCustomerInitializeOptions {\n    /**\n     * The ID of a container which the sign-in button should insert into.\n     */\n    container: string;\n\n    /**\n     * The colour of the sign-in button.\n     */\n    color?: 'Gold' | 'LightGray' | 'DarkGray';\n\n    /**\n     * The size of the sign-in button.\n     */\n    size?: 'small' | 'medium' | 'large' | 'x-large';\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CustomerStrategyActionCreator } from '..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../payment/strategies/braintree/visacheckout';\nimport VisaCheckoutScriptLoader from '../../payment/strategies/braintree/visacheckout-script-loader';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: any): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: any): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n        return visaCheckoutButton;\n    }\n}\n\nexport interface BraintreeVisaCheckoutCustomerInitializeOptions {\n    container: string;\n    onError?(error: Error): void;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\nimport { toFormUrlEncoded } from '../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { ChasePayScriptLoader } from '../../payment/strategies/chasepay';\nimport { ChasePaySuccessPayload } from '../../payment/strategies/chasepay/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport {CustomerInitializeOptions, CustomerRequestOptions} from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class ChasePayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n\nexport interface ChasePayCustomerInitializeOptions {\n    container: string;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { NotImplementedError} from '../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class SquareCustomerStrategy extends CustomerStrategy {\n\n    constructor(\n        store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { MasterpassScriptLoader } from '../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class MasterpassCustomerStrategy extends CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: true,\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy extends CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n                .then(() => this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress)))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerActionCreator from '../customer-action-creator';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class DefaultCustomerStrategy extends CustomerStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport {\n    AmazonPayCustomerStrategy,\n    BraintreeVisaCheckoutCustomerStrategy,\n    ChasePayCustomerStrategy,\n    CustomerStrategy,\n    DefaultCustomerStrategy,\n    GooglePayCustomerStrategy,\n    MasterpassCustomerStrategy,\n    SquareCustomerStrategy\n} from './strategies';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\n\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nexport default abstract class ShippingStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../shipping-request-options';\nimport { ShippingStrategyActionType } from '../shipping-strategy-actions';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class AmazonPayShippingStrategy extends ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the shipping step of\n * checkout in order to support Amazon Pay.\n *\n * When Amazon Pay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of shipping addresses for the customer to choose from.\n */\nexport interface AmazonPayShippingInitializeOptions {\n    /**\n     * The ID of a container which the address widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the customer selects an address option.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onAddressSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure of the initialization.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class DefaultShippingStrategy extends ShippingStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {\n        super(store);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { AmazonPayShippingStrategy, DefaultShippingStrategy, ShippingStrategy } from './strategies';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","import { omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (typeof object === 'object') {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","module.exports = require(\"@bigcommerce/bigpay-client\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class TimeoutError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'The request has timed out or aborted.');\n\n        this.type = 'timeout';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    loadConfig(options?: RequestOptions): ThunkAction<LoadConfigAction> {\n        return store => Observable.create((observer: Observer<LoadConfigAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n\n            if (config) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { of } from 'rxjs/observable/of';\nimport { _throw } from 'rxjs/observable/throw';\nimport { Observable } from 'rxjs/Observable';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), _throw(createErrorAction(type, error.payload, meta)));\n    }\n\n    return _throw(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: K): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.merchantName,\n                merchantId: initializationData.merchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: checkout.grandTotal.toString(),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.googleMerchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: checkout.grandTotal.toString(),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","module.exports = require(\"rxjs\");","module.exports = require(\"messageformat\");","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutError,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\n\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._messagePoster.post(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._messagePoster.post(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        this._messagePoster.post(message);\n    }\n\n    postFrameLoaded(): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n        };\n\n        this._messagePoster.post(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._messagePoster.post(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n","import EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @alpha\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow)\n    );\n}\n","/// <reference path=\"./messageformat.d.ts\" />\nimport { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = positiveAmount.toString().split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        let decimalPadding = '';\n\n        for (let i = 0; i < this._decimalPlaces; i += 1) {\n            decimalPadding += '0';\n        }\n\n        return [\n            parsedIntegerAmount,\n            `${decimalAmount}${decimalPadding}`.slice(0, this._decimalPlaces),\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = parseFloat(this._storeConfig.shopperCurrency.exchangeRate);\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @alpha\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: {\n                new(options: GooglePayPaymentOptions): GooglePayClient;\n            },\n        },\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        }\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string,\n        nonce: string,\n        cardInformation: {\n            type: string,\n            number: string,\n        },\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        },\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request/';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            }),\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport * as actionTypes from './remote-checkout-action-types';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_BILLING_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_BILLING_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_BILLING_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_REMOTE_SETTINGS_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(actionTypes.LOAD_REMOTE_SETTINGS_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_REMOTE_SETTINGS_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(actionTypes.UPDATE_REMOTE_CHECKOUT, data, { methodId });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n"],"sourceRoot":""}